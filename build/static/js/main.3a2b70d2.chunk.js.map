{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","connection.tsx","coming-soon.png","conchas-logo.png","pink-instagram.png","discord.png","twitter.png","crypto-conchas-logo.png","Cornsilk-concha.png","royal-blue-v2.png","chef-boi.png","software.png","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","color","borderRadius","fontSize","done","marginBottom","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","isActive","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","useEffect","GatewayStatus","ACTIVE","disabled","onClick","state","gatekeeper","variant","isSoldOut","isPresale","isWhitelistOnly","candyMachineId","PublicKey","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","emptyArray","setEmptyArray","isUserMinting","setIsUserMinting","setCandyMachine","open","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","discountPrice","setDiscountPrice","rpcUrl","rpcHost","wallet","useWallet","getMintAddresses","firstCreatorAddress","connection","getProgramAccounts","TOKEN_METADATA_PROGRAM_ID","dataSlice","offset","length","filters","dataSize","memcmp","bytes","toBase58","metadataAccounts","map","metadataAccountInfo","bs58","encode","account","data","getCandyMachineCreator","findProgramAddress","Buffer","from","toBuffer","CANDY_MACHINE_PROGRAM","getNFTs","Metadata","programs","metadata","candyMachineCreator","mints","i","getPDA","load","tokenMetadata","console","log","oldArray","uri","address","updateArray","setTimeout","connected","program","publicKey","uniqueAddress","filter","some","obj2","anchorWallet","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","getCandyMachineState","cndy","active","toNumber","presale","whitelistMintSettings","mint","getAtaForMint","token","getTokenAccountBalance","balance","valid","parseInt","value","amount","limit","Math","min","itemsAvailable","itemsRedeemed","document","getElementById","click","mintOneToken","mintTxId","err","awaitTransactionSignatureConfirmation","txTimeout","remaining","msg","code","window","location","reload","indexOf","toggleMintButton","now","overflow","position","maxWidth","xmlns","viewBox","d","paddingBottom","container","direction","wrap","xs","formatNumber","asNumber","price","align","gatekeeperNetwork","clusterUrl","options","autoShowModal","marginTop","zIndex","autoHideDuration","onClose","boxShadow","background","src","soon","SequenceType","sendTransactions","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","txid","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","instructions","signers","transaction","Transaction","forEach","instruction","add","recentBlockhash","blockhash","setSigners","s","partialSign","push","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","catch","reason","StopOnFailure","Promise","all","txs","getUnixTs","DEFAULT_TIMEOUT","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","sleep","confirmation","Error","error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","result","queryStatus","confirmations","subId","resolve","reject","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","createTheme","palette","type","process","getCandyMachineId","network","Connection","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","textAlign","logo","alt","ConnectionProvider","WalletProvider","autoConnect","Cornsilk","concha","royal","chef","software","href","PinkInstagram","discord","twitter","fontFamily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","val","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","TOKEN_PROGRAM_ID","getNetworkExpire","getNetworkToken","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","provider","preflightCommitment","fetchIdl","idl","fetch","id","treasury","tokenMint","hiddenSettings","getMasterEdition","getMetadata","Keypair","generate","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","expireOnUse","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","creatorBump","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","t"],"mappings":"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","file":"static/js/main.3a2b70d2.chunk.js","sourcesContent":["import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n  }),\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState } from 'react';\nimport './blobz.min.css';\n\nexport const CTAButton = styled(Button)`\n  width: 85%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  color: #fff !important;\n  background: #f49af6 !important;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  isActive: boolean;\n}) => {\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [clicked, setClicked] = useState(false);\n\n  useEffect(() => {\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n      onMint();\n      setClicked(false);\n    }\n  }, [gatewayStatus, clicked, setClicked, onMint]);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    } else if (clicked && candyMachine?.state.gatekeeper) {\n      return <CircularProgress />;\n    }\n\n    return 'MINT ON DEVNET';\n  };\n\n  return (\n    <CTAButton\n      disabled={clicked || isMinting || !isActive}\n      onClick={async () => {\n        setClicked(true);\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\n            setClicked(true);\n          } else {\n            await requestGatewayToken();\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n","import { useEffect, useMemo, useState, useCallback } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport { Button} from 'antd';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\n// import Metadata from '@metaplex-foundation/mpl-token-metadata';\n// import { deprecated } from \"@metaplex-foundation/mpl-token-metadata\";\nimport { programs } from '@metaplex/js';\nimport Typography from '@material-ui/core/Typography';\nimport { Connection, clusterApiUrl,PublicKey } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n  TOKEN_METADATA_PROGRAM_ID\n} from './candy-machine';\nimport { AlertState, toDate, formatNumber, getAtaForMint } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport './blobz.css';\nimport './blob.css';\nimport conchaPink from './201.png';\nimport bs58 from 'bs58';\nimport $ from 'jquery';\n\nimport bakery from './bakery-shop.png';\nimport soon from './coming-soon.png';\n\nconst MAX_NAME_LENGTH = 32;\nconst MAX_URI_LENGTH = 200;\nconst MAX_SYMBOL_LENGTH = 10;\nconst MAX_CREATOR_LEN = 32 + 1 + 1;\nconst MAX_CREATOR_LIMIT = 5;\nconst MAX_DATA_SIZE = 4 + MAX_NAME_LENGTH + 4 + MAX_SYMBOL_LENGTH + 4 + MAX_URI_LENGTH + 2 + 1 + 4 + MAX_CREATOR_LIMIT * MAX_CREATOR_LEN;\nconst MAX_METADATA_LEN = 1 + 32 + 32 + MAX_DATA_SIZE + 1 + 1 + 9 + 172;\nconst CREATOR_ARRAY_START = 1 + 32 + 32 + 4 + MAX_NAME_LENGTH + 4 + MAX_URI_LENGTH + 4 + MAX_SYMBOL_LENGTH + 2 + 1 + 4;\nconst candyMachineId = new PublicKey(\"G9BAVZ6QXiw7vJ5a61MjL97CD62saF5s2QwRpot4ux6x\");\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 85%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: #fff2d8;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst DisplayImage = ({nftAddress}:any,props: HomeProps) => {\n  console.log(nftAddress)\n  const [nftMetadata, setNftMetadata] = useState<any>();\n  const[NftIsClicked, setNftIsClicked] = useState<boolean>(false);\n\n  const handleClick = useCallback(\n    () => setNftIsClicked(!NftIsClicked),\n    [NftIsClicked, setNftIsClicked],\n  );\n  \n  const GetURI = async () => {\n\n    await fetch(nftAddress.uri , {\n        cache: 'force-cache'\n      })\n      .then(data => {\n        return data.json();\n      })\n      .then(data => {\n        console.log(data);\n        return setNftMetadata(data || []);\n      })\n      .catch(err => {\n        return console.log(err);\n    });\n    \n  };\n\n  useEffect(() => {\n    if(nftAddress){\n      GetURI()\n    }\n  }, [nftAddress]);\n  \n  return (\n      <div onClick={handleClick}>\n        \n        {nftMetadata?(\n          <div className=\"NFT-container\" style={{background:nftMetadata.attributes[2].value}}>\n            <div className={\"modal \" + ( NftIsClicked ? `modalOpen` : \"\")}>\n              \n                <div  onClick={handleClick}  className=\"close-icon-wrapper\">\n                  {/* <img onClick={nftExpanded} className=\"close-icon\" width=\"40px\" src={closeIcon}/> */}\n                </div>\n\n                {NftIsClicked ?(\n                  <div className=\"modal-container\" style={{background:nftMetadata.attributes[2].value}}>\n\n                    <div className=\"nft-image-focus\">\n                      <img width=\"200px\" src={nftMetadata.image} />\n                    </div>\n                    \n                    <div className=\"token-options\">\n                      <h2 className=\"token-name\">{nftMetadata.name}</h2>\n                      <a href={\"https://solscan.io/token/\"+nftAddress.address+\"?cluster=devnet\"}>Explorer</a>\n                    </div>\n                  </div>\n                ): \"\"}\n            </div>\n\n            <img style={{width:\"75%\"}} src={nftMetadata ? nftMetadata?.image:\"\"}/>\n\n          </div>\n        ):\n        <div className=\"loading-animation\" >\n\n          <svg className=\"blob\" viewBox=\"0 0 550 550\" xmlns=\"http://www.w3.org/2000/svg\">\n              <g transform=\"translate(300,300)\">\n                <path d=\"M120,-157.6C152.7,-141.5,174.3,-102.6,194.8,-58.8C215.3,-14.9,234.6,33.8,228.4,80.8C222.2,127.8,190.4,173.1,148.1,184C105.8,195,52.9,171.5,-2.4,174.8C-57.8,178.2,-115.6,208.4,-137.5,190.9C-159.3,173.3,-145.3,108,-153,56.3C-160.7,4.6,-190.2,-33.4,-178.3,-54.2C-166.4,-75.1,-113.2,-78.8,-76.6,-93.6C-40,-108.3,-20,-134.2,11.9,-150.5C43.7,-166.8,87.4,-173.6,120,-157.6Z\" fill=\"#FE840E\" />\n              </g>\n          </svg>\n                \n          <div className=\"share\">\n            <svg className=\"twitter\" viewBox=\"0 0 612 612\" >\n              <path className=\"ani\" d=\"M 612 116 c -23 10 -47 17 -72 20 26 -15 46 -40 55 -69 -24 14 -51 24 -80 30 a 125 125 0 0 0 -217 86 c 0 10 1 19 3 29 -104 -6 -196 -56 -258 -132 a 125 125 0 0 0 39 168 c -21 -1 -40 -6 -57 -16 v 2 c0 61 43 111 100 123 a127 127 0 0 1 -56 2 c 16 50 62 86 117 87 A 252 252 0 0 1 0 498 a 355 355 0 0 0 550 -301 l -1 -16 c 25 -17 46 -40 63 -65 z\"  />\n              <path d=\"M 612 116 c -23 10 -47 17 -72 20 26 -15 46 -40 55 -69 -24 14 -51 24 -80 30 a 125 125 0 0 0 -217 86 c 0 10 1 19 3 29 -104 -6 -196 -56 -258 -132 a 125 125 0 0 0 39 168 c -21 -1 -40 -6 -57 -16 v 2 c0 61 43 111 100 123 a127 127 0 0 1 -56 2 c 16 50 62 86 117 87 A 252 252 0 0 1 0 498 a 355 355 0 0 0 550 -301 l -1 -16 c 25 -17 46 -40 63 -65 z\"  />\n            </svg>\n          </div>\n\n        </div>\n      }\n      </div>\n    );\n\n}\n\nconst Home = (props: HomeProps) => {\n  const [emptyArray,setEmptyArray] = useState<any[]>([])\n  const [metadata,setMetadata] = useState();\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const getMintAddresses = async (firstCreatorAddress: PublicKey) => {\n\n    const metadataAccounts = await props.connection.getProgramAccounts(\n\n      TOKEN_METADATA_PROGRAM_ID,\n        {\n          // The mint address is located at byte 33 and lasts for 32 bytes.\n          // conditions to the data\n          dataSlice: { offset: 33, length: 32 },\n\n          filters: [\n            // Only get Metadata accounts.\n            { dataSize: MAX_METADATA_LEN },\n\n            // Filter using the first creator.\n            {\n              memcmp: {\n                offset: CREATOR_ARRAY_START,\n                bytes: firstCreatorAddress.toBase58(),\n              },\n            },\n          ],\n        },\n    );\n\n    return metadataAccounts.map((metadataAccountInfo) => (\n        bs58.encode(metadataAccountInfo.account.data)\n    ));\n\n  };\n\n  const getCandyMachineCreator = async (candyMachine: PublicKey): Promise<[PublicKey, number]> => (\n    PublicKey.findProgramAddress(\n      [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n      CANDY_MACHINE_PROGRAM,\n    )\n  );\n\n  // const getCurrentWalletNFTs =  async () =>{\n  //   try{\n      \n  //     const { Metadata } = programs.metadata;\n\n  //     if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n  //       console.log(anchorWallet.publicKey);\n        \n  //       const allNFTs = await Metadata.findByOwnerV2(props.connection,anchorWallet.publicKey);\n  //     }\n        \n              \n  //     } \n  //     catch(err){\n  //       console.log(err);\n  //     }\n  // }\n\n  const getNFTs = async () => {\n\n    const { Metadata } = programs.metadata;\n    try{\n\n        const candyMachineCreator = await getCandyMachineCreator(candyMachineId);\n        const mints = await getMintAddresses(candyMachineCreator[0]);\n        \n        if(mints.length > 0){\n          for(let i=0;i<mints.length;i++){\n            \n              const metadata = await Metadata.getPDA(new PublicKey(mints[i]));\n              const tokenMetadata = await Metadata.load(props.connection, metadata);\n              console.log(mints[i])\n              setEmptyArray(oldArray => [...oldArray, {uri:tokenMetadata.data.data.uri,address:mints[i]}]);\n\n            }\n          }\n          \n      } \n      catch(err){\n        console.log(err);\n      }\n\n      // getCurrentWalletNFTs();\n\n  };\n\n  const updateArray = () => {\n\n    const { Metadata } = programs.metadata;\n    \n     setTimeout(async() => {\n       \n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        \n        const candyMachineCreator = await getCandyMachineCreator(candyMachineId);\n        const mints = await getMintAddresses(candyMachineCreator[0]);\n        \n        if(mints.length>emptyArray.length){\n\n          const uniqueAddress = mints.filter(function(address) {\n            return !emptyArray.some(function(obj2) {\n              return address == obj2.address;\n            });\n          });\n          \n          const metadata = await Metadata.getPDA(new PublicKey(uniqueAddress[0]));\n          const tokenMetadata = await Metadata.load(props.connection, metadata);\n          setEmptyArray(oldArray => [...oldArray, {uri:tokenMetadata.data.data.uri,address:uniqueAddress}]);\n            \n      \n        }\n\n      }},35000);\n\n  }\n  \n  useEffect(()=>{\n      if(setEmptyArray.length<=1){\n        getNFTs();\n      }\n  },[]);\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection,\n        );\n        let active =\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n        let presale = false;\n        // whitelist mint?\n        if (cndy?.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (\n            cndy.state.whitelistMintSettings.presale &&\n            (!cndy.state.goLiveDate ||\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n          ) {\n            presale = true;\n          }\n          // is there a discount?\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined);\n            // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          }\n          // retrieves the whitelist token\n          const mint = new anchor.web3.PublicKey(\n            cndy.state.whitelistMintSettings.mint,\n          );\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(\n              token,\n            );\n            let valid = parseInt(balance.value.amount) > 0;\n            // only whitelist the user if the balance > 0\n            setIsWhitelistUser(valid);\n            active = (presale && valid) || active;\n          } catch (e) {\n            setIsWhitelistUser(false);\n            // no whitelist user, no mint\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n            console.log('There was a problem fetching whitelist token balance');\n            console.log(e);\n          }\n        }\n        // datetime to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n          if (\n            cndy.state.endSettings.number.toNumber() <\n            new Date().getTime() / 1000\n          ) {\n            active = false;\n          }\n        }\n        // amount to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.amount) {\n          let limit = Math.min(\n            cndy.state.endSettings.number.toNumber(),\n            cndy.state.itemsAvailable,\n          );\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        setIsActive((cndy.state.isActive = active));\n        setIsPresale((cndy.state.isPresale = presale));\n        setCandyMachine(cndy);\n      } catch (e) {\n        console.log('There was a problem fetching Candy Machine state');\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const onMint = async () => {\n    \n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        const mintTxId = (\n          await mintOneToken(candyMachine, wallet.publicKey)\n        );\n        \n        let status: any = { err: true };\n        if (mintTxId[0]) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId[0],\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n        }\n        \n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        console.log(error.msg)\n        if (!error.message) {\n          message = 'Transaction Timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the lastest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n      updateArray();      \n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  return (\n    <div className=\"mint-container\">\n      <Container\n        style={{\n          margin: `200px 0px 200px 0px`,\n          overflow: ``,\n          position: `relative`,\n        }}\n      >\n        {/* <div style={{top: `93px`,position:`absolute`, left:`132px`, padding: `15px`}}>  \n          <img style={{width: `200px`}} src={conchaPink} alt=\"concha\"/>\n        </div>   */}\n\n        <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\n          <div className=\"tk-blob\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 341.4 374.7\">\n              <path d=\"M309.9 70.6c37.8 52.7 39.8 128.7 15.4 184.1-24.3 55.4-75 90.1-125.4 107.4-50.4 17.4-100.4 17.4-136.2-3.3-35.7-20.7-57.2-62-62.4-102.1-5.2-40.2 5.8-79 29.1-128.3C53.6 79.1 89.1 19.3 143.7 4.1 198.3-11.2 272 18 309.9 70.6z\"></path>\n            </svg>\n          </div>\n          <Paper\n            style={{\n              paddingBottom: 10,\n              borderRadius: 6,\n              margin: `auto`,\n            }}\n          >\n            {!wallet.connected ? (\n              <ConnectButton><p style={{color:\"#000\"}}>Connect Wallet</p></ConnectButton>\n            ) : (\n              <>\n                {candyMachine && (\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justifyContent=\"center\"\n                    wrap=\"nowrap\"\n                  >\n                    <Grid item xs={3}>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        IN THE OVEN\n                      </Typography>\n                      <Typography\n                        variant=\"h6\"\n                        color=\"textPrimary\"\n                        style={{\n                          fontWeight: 'bold',\n                        }}\n                      >\n                        {`${itemsRemaining}`}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={4}>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        {isWhitelistUser && discountPrice\n                          ? 'Discount Price'\n                          : 'Price'}\n                      </Typography>\n                      <Typography\n                        variant=\"h6\"\n                        color=\"textPrimary\"\n                        style={{ fontWeight: 'bold' }}\n                      >\n                        {isWhitelistUser && discountPrice\n                          ? ` ${formatNumber.asNumber(discountPrice)}`\n                          : ` ${formatNumber.asNumber(\n                              candyMachine.state.price,\n                            )}`}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={5}>\n                      {isActive && endDate && Date.now() < endDate.getTime() ? (\n                        <>\n                          <MintCountdown\n                            key=\"endSettings\"\n                            date={getCountdownDate(candyMachine)}\n                            style={{ justifyContent: 'flex-end' }}\n                            status=\"COMPLETED\"\n                            onComplete={toggleMintButton}\n                          />\n                          <Typography\n                            variant=\"caption\"\n                            align=\"center\"\n                            display=\"block\"\n                            style={{ fontWeight: 'bold' }}\n                          >\n                            TO END OF MINT\n                          </Typography>\n                        </>\n                      ) : (\n                        <>\n                          <MintCountdown\n                            key=\"goLive\"\n                            date={getCountdownDate(candyMachine)}\n                            style={{ justifyContent: 'flex-end' }}\n                            status={\n                              candyMachine?.state?.isSoldOut ||\n                              (endDate && Date.now() > endDate.getTime())\n                                ? ''\n                                : isPresale\n                                ? ''\n                                : ''\n                            }\n                            onComplete={toggleMintButton}\n                          />\n                          {isPresale &&\n                            candyMachine.state.goLiveDate &&\n                            candyMachine.state.goLiveDate.toNumber() >\n                              new Date().getTime() / 1000 && (\n                              <Typography\n                                variant=\"caption\"\n                                align=\"center\"\n                                display=\"block\"\n                                style={{ fontWeight: 'bold' }}\n                              >\n                                UNTIL PUBLIC MINT\n                              </Typography>\n                            )}\n                        </>\n                      )}\n                    </Grid>\n                  </Grid>\n                )}\n                <MintContainer>\n                  {candyMachine?.state.isActive &&\n                  candyMachine?.state.gatekeeper &&\n                  wallet.publicKey &&\n                  wallet.signTransaction ? (\n                    <GatewayProvider\n                      wallet={{\n                        publicKey:\n                          wallet.publicKey ||\n                          new PublicKey(CANDY_MACHINE_PROGRAM),\n                        //@ts-ignore\n                        signTransaction: wallet.signTransaction,\n                      }}\n                      gatekeeperNetwork={\n                        candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                      }\n                      clusterUrl={rpcUrl}\n                      options={{ autoShowModal: false }}\n                    >\n                      <MintButton\n                        candyMachine={candyMachine}\n                        isMinting={isUserMinting}\n                        onMint={onMint}\n                        isActive={isActive || (isPresale && isWhitelistUser)}\n                      />\n                    </GatewayProvider>\n                  ) : (\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      onMint={onMint}\n                      isActive={isActive || (isPresale && isWhitelistUser)}\n                    />\n                  )}\n                </MintContainer>\n              </>\n            )}\n            <Typography\n              variant=\"caption\"\n              align=\"center\"\n              display=\"block\"\n              style={{ marginTop: 7, color: 'grey', zIndex: `1` }}\n            >\n              CLICK FOR CONCHA\n            </Typography>\n          </Paper>\n        </Container>\n\n        <Snackbar\n          open={alertState.open}\n          autoHideDuration={6000}\n          onClose={() => setAlertState({ ...alertState, open: false })}\n        >\n          <Alert\n            onClose={() => setAlertState({ ...alertState, open: false })}\n            severity={alertState.severity}\n          >\n            {alertState.message}\n          </Alert>\n        </Snackbar>\n        \n      </Container>\n      <div className=\"inventory\" style={{boxShadow:\"inset 1px 1px 5px #000\",background:\"#ffd495\",color:\"#fff\"}} >\n        <div>\n\n          <img style={{width:\"75%\", margin:\"10%\"}} src={soon}/>\n          {/* <h2 style={{fontFamily: 'Bounties'}}>Your Bakery</h2> */}\n          {/* {(() => {\n            if(emptyArray.length>0){\n              return(\n                <div className=\"token-image-container\" >\n                  <h2 className=\"other-font minted-bakery-title\" style={{fontFamily: 'Bounties'}}>Minted Bakery</h2>\n                  <p className=\"other-font mint-count\">\n                    {emptyArray.length}/1500\n                  </p>\n                  {\n                  emptyArray.map((nftAddress, index)=>{\n                    return (\n                      <div key={index} className=\"display-image-container\" style={{display:\"inline-block\"}}>\n                        <DisplayImage\n                          nftAddress={nftAddress}\n                          />\n                      </div>\n                    )})\n                  }\n                </div>\n              )\n            }else{\n              return(                \n                <div className=\"no-artwork\"> */}\n                  \n                  {/* <p className=\"slideDown other-font low-on-bread\">You're low on bread!</p> */}\n          {/* \n                </div>\n                )\n            }  \n          })()} */}\n        </div>\n{/*             \n        {(() => {\n            if(emptyArray.length>0){\n              return(\n                <div className=\"token-image-container\" >\n                  <h2 className=\"other-font minted-bakery-title\" style={{fontFamily: 'Bounties'}}>Minted Bakery</h2>\n                  <p className=\"other-font mint-count\">\n                    {emptyArray.length}/1500\n                  </p>\n                  {\n                  emptyArray.map((nftAddress, index)=>{\n                    return (\n                      <div key={index} className=\"display-image-container\" style={{display:\"inline-block\"}}>\n                        <DisplayImage\n                          nftAddress={nftAddress}\n                          />\n                      </div>\n                    )})\n                  }\n                </div>\n              )\n            }else{\n              return(                \n                <div className=\"no-artwork\">\n                  \n                  <p className=\"slideDown other-font low-on-bread\">Getting this bread....</p>\n                  <div className=\"bakery-image-container\">\n                    <img className=\"heartbeat\" width=\"100px\" src={bakery} />\n                  </div>  \n\n                </div>\n                )\n            }  \n          })()} */}\n      </div>\n    </div>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch(reason => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          // Return the txn we failed on by index\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","export default __webpack_public_path__ + \"static/media/coming-soon.1a8d5afc.png\";","export default __webpack_public_path__ + \"static/media/conchas-logo.62a792e6.png\";","export default __webpack_public_path__ + \"static/media/pink-instagram.bd5d6780.png\";","export default __webpack_public_path__ + \"static/media/discord.62d7274c.png\";","export default __webpack_public_path__ + \"static/media/twitter.e5db7caf.png\";","export default __webpack_public_path__ + \"static/media/crypto-conchas-logo.ce4373d9.png\";","export default __webpack_public_path__ + \"static/media/Cornsilk-concha.cc598583.png\";","export default __webpack_public_path__ + \"static/media/royal-blue-v2.4425bb38.png\";","export default __webpack_public_path__ + \"static/media/chef-boi.0b1efdd3.png\";","export default __webpack_public_path__ + \"static/media/software.21ecb5b6.png\";","import './App.css';\nimport { useMemo } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport Home from './Home';\n\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\nimport './index.sass';\nimport './roadmap.scss';\nimport './blobz.min.css';\nimport { ThemeProvider, createTheme } from '@material-ui/core';\nimport logo from './conchas-logo.png';\nimport PinkInstagram from './pink-instagram.png';\nimport discord from './discord.png';\nimport twitter from './twitter.png';\nimport conchaPink from './201.png';\nimport concha from \"./crypto-conchas-logo.png\"\nimport Cornsilk from \"./Cornsilk-concha.png\"\nimport royal from \"./royal-blue-v2.png\"\nimport chef from \"./chef-boi.png\"\nimport software from \"./software.png\"\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst txTimeoutInMilliseconds = 30000;\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [],\n  );\n\n  return (\n    <div className=\"appContainer\">\n      <ThemeProvider theme={theme}>\n        <div style={{ background: ``, textAlign: `center`, padding: `35px` }}>\n          <img style={{ width: `321px` }} src={logo} alt=\"Bubbles fonts\" />\n        </div>\n        <div className=\"mint-container-background\"></div>\n\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect>\n            <WalletDialogProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                connection={connection}\n                txTimeout={txTimeoutInMilliseconds}\n                rpcHost={rpcHost}\n              />\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n\n        <div className=\"timeline\"> \n          <div className=\"timeline__event  animated fadeInUp delay-3s timeline__event--type1\">\n            <div className=\"timeline__event__icon\">\n              <i className=\"lni-burger\"></i>\n              <img src={Cornsilk}/>              \n            </div>\n            <div className=\"timeline__event__content \">\n              <div className=\"timeline__event__title\">\n                Launch\n              </div>\n              <div className=\"timeline__event__description\">\n                <p>Crypto conchas will launch with a limited supply of 1000 mintable NFTs!</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"timeline__event animated fadeInUp delay-1s timeline__event--type3\">\n            <div className=\"timeline__event__icon\">\n              <img src={concha}/>\n            \n              <i className=\"lni-slim\"></i>\n            </div>\n            <div className=\"timeline__event__content\">\n              <div className=\"timeline__event__title\">\n                50 Concha Giveaway\n              </div>\n              <div className=\"timeline__event__description\">\n                <p>25 minted Conchas wiil be sent out to early social media followers</p>\n                <p>The next 25 conchas minted will be free on launch day</p>\n              </div>\n\n            </div>\n          </div>\n          <div className=\"timeline__event animated fadeInUp delay-2s timeline__event--type2\">\n            <div className=\"timeline__event__icon yellow-icon\">\n              <i className=\"lni-cake\"></i>\n              <img src={concha}/>\n            </div>\n            <div className=\"timeline__event__content\">\n              <div className=\"timeline__event__title\">\n                Winner\n              </div>\n              <div className=\"timeline__event__description\">\n                <p>Winner of 1 Solana raffel will be announced</p>\n                <p>When Crypto Conchas first edition sells out, a random holder will be chosen for our 1 solana giveaway</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"timeline__event animated fadeInUp timeline__event--type1\">\n            <div className=\"timeline__event__icon\">\n              <i className=\"lni-cake\"></i>\n              <img src={royal}/>\n            </div>\n         <div className=\"timeline__event__content\">\n              <div className=\"timeline__event__title\">\n                Evolution\n              </div>\n              <div className=\"timeline__event__description\">\n                <p>Once first edition has been fully minted, our team will work on a new and evolved concha. We will also venture into new blockchain projects that holders will have early access to.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"the-team-container\">\n          <h2>The Team</h2>\n\n          <div className=\"the-team\">\n            <h3>Software</h3>\n            <img src={chef}/>            \n          </div>\n\n          <div className=\"the-team\">\n            <h3>Artist</h3>\n            <img src={software}/>\n          </div>\n        </div>\n\n        <div className=\"social-media\">\n          <div className=\"social-media-image-container\">\n            <a\n              href=\"https://www.instagram.com/cryptoconchas/\"\n              className=\"social-media-link\"\n            >\n              <img src={PinkInstagram} />\n            </a>\n          </div>\n          <div className=\"social-media-image-container\">\n            <a\n              href=\"https://discord.gg/EbeAgZXSn9/\"\n              className=\"social-media-link\"\n            >\n              <img src={discord} />\n            </a>\n          </div>\n\n          <div className=\"social-media-image-container\">\n            <a\n              href=\"https://twitter.com/ConchasCrypto\"\n              className=\"social-media-link\"\n            >\n              <img src={twitter} />\n            </a>\n          </div>\n        </div>\n\n        <div className=\"faq-container\">\n          <div className=\"wave\"></div>\n\n          <div className=\"faq-header\">\n            <h1>FAQ</h1>\n          </div>\n\n          <div className=\"faq-container\">\n            <div className=\"faq\">\n              <div className=\"faq-question\">\n                <h2>How do I get one?</h2>\n              </div>\n              <div className=\"faq-answer\">\n                <ul>\n                  <li>\n                    Download and install a Chrome browser plugin called{' '}\n                    <a href=\"https://phantom.app/download\">Phantom Wallet</a>.\n                    This will allow websites <span style={{fontFamily:'Bounties'}}> (that you authorize) </span>access to your\n                    Solana account.\n                  </li>\n                  <li>\n                    If you're on mobile, try using the{' '}\n                    <a href=\"https://phantom.app/download\">\n                      IOS Phantom Wallet App\n                    </a>\n                  </li>\n                  <li>\n                    Once you have the plugin installed, or app the website will\n                    recognize it and then display a MINT button to purchase a\n                    Concha.\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"faq\">\n              <div className=\"faq-question\">\n                <h2>What's an NFT?</h2>\n              </div>\n              <div className=\"faq-answer\">\n                <ul>\n                  <li>\n                    Non-fungible token or NFT is a unique token that points to{\" \"}\n                    <span style={{fontFamily:'Bounties'}}>WHATEVER YOU WANT</span>, usually a URL of a picture, video or a\n                    concha.\n                  </li>\n\n                  <li>\n                    NFT's usally have one owner and can be verified on the\n                    ledger.\n                  </li>\n\n                  <li>\n                    A Non-fungible token cannot be dubplicated and is stored in\n                    the blockchain.\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"faq\">\n              <div className=\"faq-question\">\n                <h2>How to get a crypto wallet</h2>\n              </div>\n              <div className=\"faq-answer\">\n                <ul>\n                  <li>\n                    Download and install the{\" \"}\n                    <a href=\"https://phantom.app/download\">Phantom Wallet</a> if\n                    you're on chrome or a suitable alternative.\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"faq\">\n              <div className=\"faq-question\">\n                <h2>What's the blockchain?</h2>\n              </div>\n              <div className=\"faq-answer\">\n                <ul>\n                  <li>\n                    The blockchain is a distributed database <span style={{fontFamily:'Bounties'}}>(Used to store\n                    data).</span>\n                  </li>\n                  <li>\n                    The data stored on a blockchain is a ledger of transactions.\n                  </li>\n                  <li>\n                    Blockchains store data <span style={{fontFamily:'Bounties'}}>(transactions)</span> in chronological\n                    groups, known as blocks, instead of folders and tables like\n                    normal databases.\n                  </li>\n                  <li>\n                    Bitcoin | Ethereum & Solana's blockchain is open and\n                    accessible to anyone, unlike a centralized database run by a\n                    company.\n                  </li>\n                  <li>\n                    Unlike databases where information can be added, removed or\n                    edited, blockchains can only be added to.\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"faq\">\n              <div className=\"faq-question\">\n                <h2>What are conchas?</h2>\n              </div>\n              <div className=\"faq-answer\">\n                <p>\n                  Conchas get their name from their round shape and striped\n                  seashell <span style={{fontFamily:'Bounties'}}>(concha in spanish)</span> like appearance. A concha consists\n                  of two parts; a sweetened bread roll, and a crunchy topping.\n                </p>\n                <p>\n                  Conchas are a Mexican style sweet bread that was orignially\n                  inspiration by Brioche, but somewhere along the way we decided\n                  to make it fun and added colorful sugar on top and now rest is\n                  history. You can find conchas all over North America at any\n                  Mexican bakery <span style={{fontFamily:'Bounties'}}>(Mexico and the U.S)</span>\n                </p>\n              </div>\n            </div>\n            <div className=\"faq\">\n              <div className=\"faq-question\">\n                <h2>How to make conchas</h2>\n              </div>\n              <div className=\"faq-answer\">\n                <p>\n                  Easy! All you need it flour 🍞 butter 🧈 milk 🥛 eggs 🥚 and baking\n                  powder\n                </p>\n                <a\n                  className=\"recipe-link\"\n                  href=\"https://www.mexicoinmykitchen.com/concha-recipe/\"\n                >\n                  Concha recipe\n                </a>\n                <a\n                  className=\"recipe-link\"\n                  href=\"https://www.youtube.com/watch?v=cCX3fqfEfZg\"\n                >\n                  Concha video recipe (Spanish)\n                </a>\n              </div>\n            </div>\n            <div className=\"faq\">\n              <div className=\"faq-question\">\n                <h2>Who are we?</h2>\n              </div>\n              <div className=\"faq-answer\">\n                <p>\n                  We're a small team of developers trying to build cool things\n                  on the internet.\n                </p>\n                <p>\n                  We like  blockchain technology and all it can do. Our team invisions a future where we all use, so we created something fun with it.\n                </p>\n                <p>\n                  We want to build better and cooler things, <span style={{fontFamily:'Bounties'}}>Crypto Conchas</span> was just the begining. ✌️ \n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { SystemProgram, SYSVAR_SLOT_HASHES_PUBKEY } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nexport const TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n"],"sourceRoot":""}